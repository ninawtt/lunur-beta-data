[
  // Tree
  { id: 104, pass: 1, fail: 0, time: 3 },
  { id: 543, pass: 1, fail: 0, time: 10 },
  { id: 2331, pass: 1, fail: 0, time: 9 },
  { id: 1325, pass: 1, fail: 0, time: 13 },
  // Build Tree
  { id: 654, pass: 1, fail: 0, time: 5 },
  { id: 105, pass: 0, fail: 1 },
  { id: 106, pass: 0, fail: 1 },
  { id: 889, pass: 0, fail: 1 },
  { id: 297, pass: 1, fail: 0, time: 30 },
  // Binary Search Tree (BST)
  { id: 230, pass: 1, fail: 0, time: 10 },
  // Greater Sum Tree
  { id: 538, pass: 0, fail: 1 },
  // Complete Tree (每一層都滿的(Perfect Tree),若最後一曾不是滿的且節點靠左(Complete Tree)
  { id: 222, pass: 0, fail: 1 },
  // Lowest Common Ancestor of Tree
  { id: 236, pass: 1, fail: 0, time: 15 },
  { id: 235, pass: 0, fail: 0 }, // BST
  // Balanced Binary Tree (AVL Tree)
  { id: 110, pass: 0, fail: 0 },

  // Array/2D-Array-Matrix
  { id: 48, pass: 1, fail: 0, time: 11 },
  { id: 54, pass: 1, fail: 0, time: 20 },
  { id: 59, pass: 1, fail: 0, time: 15 },
  // TODO Traverse2DArray.java 找類似題目
  // FloodFill (Island) 2D array + DFS
  { id: 733, pass: 0, fail: 0 },
  { id: 200, pass: 1, fail: 0, time: 4 },
  { id: 130, pass: 1, fail: 0, time: 15 }, // deal with edges
  { id: 1254, pass: 0, fail: 0 }, // deal with edges
  { id: 1020, pass: 0, fail: 0 }, // deal with edges 面積
  // PREFIX_SUM
  { id: 303, pass: 0, fail: 0 },
  { id: 304, pass: 0, fail: 0 },
  // PREFIX_DIFF_SUM
  { id: 370, pass: 0, fail: 0 },
  { id: 1094, pass: 0, fail: 0 },
  { id: 1109, pass: 0, fail: 0 },

  // QUICK_SORT
  { id: 75, pass: 0, fail: 0 }, // quicksort and one pass sol
  // MERGE_SORT
  { id: 315, pass: 0, fail: 0 },
  // Binary Search
  { id: 704, pass: 2, fail: 0, time: 2 },
  { id: 658, pass: 0, fail: 1 },
  { id: 162, pass: 0, fail: 0 }, // local maximum

  // Backtracking/ DFS/ Permutation
  { id: 46, pass: 0, fail: 0 }, // permutations
  { id: 78, pass: 0, fail: 0 }, // subsets
  { id: 77, pass: 0, fail: 0 }, // combinations
  // Two Pointers
  { id: 125, pass: 0, fail: 0 }, // Valid Palindrome

  // Sliding Window
  { id: 3, pass: 1, fail: 0 },
  { id: 76, pass: 1, fail: 0, time: 20 },
  { id: 438, pass: 0, fail: 1 },
  { id: 567, pass: 0, fail: 0 },
  { id: 242, pass: 0, fail: 0 }, // Valid Anagram

  // Stack
  { id: 20, pass: 0, fail: 0 }, // Valid Parentheses
  // Monotonic Stack
  { id: 496, pass: 1, fail: 0, time: 24 },
  { id: 503, pass: 1, fail: 0, time: 7 },
  { id: 739, pass: 0, fail: 1 },
  // Monotonic Queue
  { id: 239, pass: 0, fail: 0 },

  // Interval
  { id: 56, pass: 0, fail: 0 },
  { id: 1288, pass: 0, fail: 0 },
  { id: 986, pass: 0, fail: 0 },

  // Trie (PREFIX_TREE)
  { id: 208, pass: 0, fail: 0 },

  // Graph
  { id: 797, pass: 0, fail: 0 },
  // UNION_FIND
  { id: 684, pass: 0, fail: 0 },
  // KRUSKAL
  { id: 1584, pass: 0, fail: 0 },
  // DIJKSTRA
  { id: 743, pass: 0, fail: 0 },
  // TOPOLOGICAL_SORT 207 210
  { id: 210, pass: 0, fail: 0 },

  // DP/dynamic programming
  { id: 70, pass: 1, fail: 0, time: 3 },
  { id: 746, pass: 2, fail: 0, time: 12 },
  { id: 322, pass: 0, fail: 1 },
  { id: 300, pass: 1, fail: 1, time: 9 },
  { id: 931, pass: 1, fail: 0, time: 20 },
  { id: 53, pass: 0, fail: 1 },
  // House Robber
  { id: 198, pass: 0, fail: 0 },
  { id: 213, pass: 0, fail: 0 },
  { id: 337, pass: 0, fail: 0 },
  // Buy and Sell Stock
  { id: 121, pass: 0, fail: 0 },
  { id: 122, pass: 0, fail: 0 }, // template based on this
  { id: 123, pass: 0, fail: 0 },
  { id: 188, pass: 0, fail: 0 },
  { id: 309, pass: 0, fail: 0 },
  { id: 714, pass: 0, fail: 0 },

  // Math
  { id: 50, pass: 0, fail: 0 },
  { id: 69, pass: 0, fail: 0 },
];
